// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// AssetsDir statically implements the virtual filesystem provided to vfsgen.
var AssetsDir = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2022, 2, 2, 18, 17, 28, 461043783, time.UTC),
		},
		"/css": &vfsgen۰DirInfo{
			name:    "css",
			modTime: time.Date(2022, 2, 2, 18, 17, 28, 461043783, time.UTC),
		},
		"/css/main.css": &vfsgen۰CompressedFileInfo{
			name:             "main.css",
			modTime:          time.Date(2022, 2, 2, 18, 17, 28, 461043783, time.UTC),
			uncompressedSize: 153,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd2\x4b\xcb\x49\x4c\x57\xa8\xe6\x52\x50\xc8\x4d\x2c\x4a\xcf\xcc\xd3\x2d\xca\x4c\xcf\x28\xb1\x52\x30\x34\x28\xa8\xb0\xe6\x52\x50\x28\xcf\x4c\x29\xc9\xb0\x52\x30\xd4\x33\x4a\xcd\x55\x50\xcc\xcc\x2d\xc8\x2f\x2a\x49\xcc\x2b\x01\x49\x65\xa4\x42\x95\x62\xc8\xd5\x72\x71\xe9\xe5\xe5\x97\x64\xa6\x65\x26\x27\x96\x64\xe6\xe7\x29\x64\xea\xa5\x25\x16\xeb\x28\xa0\x0a\x16\x97\xe1\xb6\xb8\x96\x0b\x10\x00\x00\xff\xff\xbc\x8c\xb8\x10\x99\x00\x00\x00"),
		},
		"/icon.png": &vfsgen۰FileInfo{
			name:    "icon.png",
			modTime: time.Date(2022, 2, 2, 18, 17, 28, 461043783, time.UTC),
			content: []byte("\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x30\x00\x00\x00\x30\x08\x06\x00\x00\x00\x57\x02\xf9\x87\x00\x00\x00\x04\x73\x42\x49\x54\x08\x08\x08\x08\x7c\x08\x64\x88\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x01\x6e\x00\x00\x01\x6e\x01\x84\x50\x5f\x24\x00\x00\x00\x19\x74\x45\x58\x74\x53\x6f\x66\x74\x77\x61\x72\x65\x00\x77\x77\x77\x2e\x69\x6e\x6b\x73\x63\x61\x70\x65\x2e\x6f\x72\x67\x9b\xee\x3c\x1a\x00\x00\x05\x85\x49\x44\x41\x54\x68\x81\xdd\x9a\x5b\x6c\x14\x55\x18\xc7\x7f\x3b\xbb\xcc\xf6\xb2\xbb\xdd\x4b\xe9\x45\xb4\x2d\xa1\x11\x14\x6a\x35\x25\xa0\x86\x84\xa4\x42\x02\x89\x18\x10\x02\xa6\x40\x10\xc1\x28\x42\x63\xd4\x88\x42\x78\x98\x88\x08\x51\xe1\x05\x63\x4c\x4c\x0c\x21\xf2\xa0\x2f\x92\x10\x8d\x31\x92\xf0\x40\x22\xbc\x54\xa5\x4d\xbb\xd0\x2e\x68\x4b\xbb\xbb\xdd\x4b\xb7\xd3\xe9\x76\x97\xdd\x99\xf5\xa1\x58\xb2\xb4\xbb\xdb\x6e\x2f\x53\xfd\x3d\x4d\xce\x9c\x6f\xf2\xff\x4f\xce\x99\xf3\x7d\xe7\x8c\x01\x30\x48\x92\xf4\x05\x70\x00\x30\xf0\xdf\x20\x05\x7c\x29\x49\x52\xb3\x41\x92\xa4\x15\x40\xab\xde\x8a\xf2\x41\x10\x84\x15\x02\x60\xd3\x5b\x48\xbe\x68\x9a\x56\x22\xe8\x2d\x62\xba\xe4\x34\x10\x89\x44\x88\xc5\x62\x24\x93\x49\x02\x81\xc0\x5c\x68\x9a\x12\x39\x0d\x04\x02\x01\x64\x59\x66\x64\x64\x84\xbe\xbe\xbe\xb9\xd0\x34\x25\xe6\xc5\x10\xfa\x75\x9d\xcc\x99\x77\xfc\x78\x2b\x12\x69\xed\x3f\x6c\x1e\xe0\xec\xa1\x7e\x06\x6d\x6a\xc6\xd8\x79\x61\xa0\xbb\xea\x1e\xb2\x4d\x25\xb0\x30\xdd\xc0\xdf\x35\x09\x42\xae\x24\x11\x7b\x32\x63\xac\x69\xb6\xc5\x4d\x86\xed\xdf\x3b\xf1\x55\x24\x58\xd2\x25\xa6\xb5\xef\x39\xe7\x44\x2e\xd1\xa8\xee\x16\x33\x44\x4e\xc2\x80\x28\x8a\x98\x4c\x26\x4c\x26\x13\x05\x05\x05\xd3\x57\x3b\x01\x16\x45\xa0\xb6\xcb\x3c\xae\xdd\x11\x31\xe1\x88\x64\x8f\xcd\x69\xa0\xba\xba\x7a\xec\x7a\xe9\xd2\xa5\x53\x57\x37\xcb\xcc\x8b\x39\x30\x1d\x04\x20\xa6\xb7\x88\x69\x10\x13\x2a\x2b\x2b\x5b\x81\xdf\xf5\x56\x92\x07\x2d\xc0\x0d\x03\xc0\xa9\x53\xa7\x4a\x62\xb1\xd8\x1b\xa1\x50\x68\xcd\xc0\xc0\xc0\x26\x9d\x85\x65\xc5\xe1\x70\x5c\x72\xb9\x5c\x57\x81\xaf\x24\x49\x92\xc7\xd2\x67\x49\x92\x6a\x5a\x5b\x5b\x77\x46\x22\x91\x8f\x75\xd4\x97\x13\xbb\xdd\x7e\xac\xae\xae\xee\x82\x24\x49\x7f\xc1\xfd\xfc\x5f\x92\xa4\x13\xc0\x51\x3d\x85\xe5\xc1\x67\x92\x24\x1d\x36\x1c\x3f\x7e\x7c\x89\xaa\xaa\x5d\x7a\xab\xc9\x07\xa3\xd1\x58\x2b\xa8\xaa\x5a\xae\xb7\x90\x7c\x51\x55\xb5\xfc\x7f\xb1\x0e\x64\x25\x1c\x0e\x13\x8d\x46\x51\x55\x15\x9f\xcf\x37\x17\x9a\xa6\x44\x4e\x03\xa1\x50\x08\x45\x51\x48\x26\x93\xf8\xfd\xfe\xb9\xd0\x34\x25\xe6\xc5\x10\xfa\x69\xe3\x20\xa7\x3e\xf4\xd1\xbb\x28\x3d\x9d\xfe\x6e\x7b\x98\xcf\xdf\xf3\x31\x90\x25\x9d\x9e\x17\x06\xfa\xcb\x93\xc4\xcc\xda\x38\xa1\xfe\x8a\x24\x8a\x45\x43\xb1\x68\x19\x63\xe7\x45\x3d\xb0\xe3\x3b\x07\x81\xd2\x24\x55\x3d\xe9\x79\xff\xde\x6f\x5c\x28\x56\x8d\x4a\xef\x82\x8c\xb1\x39\x0d\x98\xcd\x66\x44\x51\xc4\x68\x34\x62\xb3\xcd\xce\x0e\x4c\xe1\x88\x30\x4e\x3c\x80\x55\x31\x62\x55\x8c\x59\x63\x73\x1a\xa8\xaa\xaa\x1a\xbb\x5e\xbc\x78\x71\x1e\xf2\x66\x97\x79\x31\x07\xa6\x83\x20\x08\x42\xe6\x92\x5f\x07\x12\x89\x04\xc1\x60\x10\x59\x96\x73\xf6\x15\x04\x41\x35\x59\x2c\x96\x1b\xb2\x2c\x77\x01\xb5\xb3\x2f\x2f\x3b\xfd\xfd\xfd\xb4\xb4\xb4\x20\x18\x92\xc4\xef\xa5\x28\x2f\x2f\xa7\xa1\xa1\x01\xa3\x71\xc2\x79\xd0\x69\xb1\x58\x46\xeb\x81\x93\x27\x4f\x3a\xe2\xf1\xf8\x9e\x50\x28\xd4\xa8\x57\x3d\xa0\xaa\x2a\x1e\x8f\x87\x7d\x2f\xdb\xd8\xb7\xd5\x81\x37\x90\xe0\xad\xe3\x5e\xe2\x6a\x09\x65\x65\x65\x63\xfd\x1c\x0e\xc7\xa5\xd2\xd2\xd2\xcb\xa2\x28\x9e\x3f\x72\xe4\xc8\x80\x09\x20\x1e\x8f\x0f\x01\xd7\x82\xc1\x60\x59\x38\x1c\xd6\xc5\x80\xa2\x28\x2c\x79\xcc\xc4\xfe\xad\x76\x04\x01\x1e\x2d\x5f\xc0\xfb\x7b\x4b\x79\xf7\x53\x3f\xa9\x54\x0a\x41\x10\xfe\x35\xda\xe6\x72\xb9\xae\x3b\x9d\x4e\x05\x46\xcf\x06\x8a\x80\xeb\xc0\x0a\x3d\x84\x03\x44\xa3\x51\xae\x5c\xb9\xc2\xd9\xa3\x65\xac\xaa\x2b\x4c\xbb\x77\xe0\x23\x2f\x7e\x79\x21\xf5\xf5\xf5\x0f\x87\xb5\x17\x17\x17\xaf\x12\x80\xa7\xd0\x51\x3c\x80\xdb\xed\x66\x75\x9d\x99\x55\x75\x85\x68\x5a\x8a\xcb\xd7\x86\xe9\xf6\x8e\xa6\x15\x87\x9a\x9c\xdc\xbd\xdb\xc3\xd0\xd0\xd0\xc3\x61\x4f\x0e\x0f\x0f\xd7\x09\xe8\xfc\x29\x1d\x1c\x1c\xc4\xe7\xf3\x72\xb0\xc9\x09\xc0\xcf\x57\x15\x3e\x38\xe3\xa7\xf9\x84\x17\x80\xe5\xb5\x66\x1a\x57\x17\xe1\x76\xbb\x27\x0a\x17\x74\x5f\x07\xda\xdb\xdb\xd9\xb8\xa6\x98\xa5\x35\xa3\x2b\xf1\x80\x3c\x9a\xf7\x84\xe5\x07\xf9\x4f\xf3\x4e\x17\xa1\xa0\x9f\x60\x30\x38\x2e\x3e\xa7\x01\x8f\xc7\x43\x30\x18\x24\x1a\x8d\xd2\xd6\xd6\x36\x53\xba\x81\xd1\xcf\xa6\x3c\x18\xe2\xcd\x1d\x8e\xac\xfd\x16\x95\x99\xd8\xb2\xce\x4a\x47\x47\x07\xa9\x54\x2a\xed\x5e\x4e\x03\x9a\xa6\xa1\x69\x1a\xaa\xaa\xa2\xaa\x33\xb7\xe6\xa5\x52\x29\xdc\x6e\x37\xaf\x6c\x2c\xa1\xa2\x34\x77\x4e\xf9\xfa\x36\x07\x89\xb8\x8c\xd7\xeb\x4d\x6b\xd7\x6d\x08\xf5\xf6\xf6\x92\x52\x15\x5e\xdd\x6c\x9f\x54\x7f\x87\xcd\xc8\xee\x97\x4a\xe8\xe8\xe8\x40\xd3\x1e\x0c\x2f\x5d\x0c\x68\x9a\xc6\xcd\x9b\x37\x79\x6d\x8b\x1d\x9b\x65\xf2\x12\x76\x6f\xb2\x63\x29\x88\xd3\xdd\xdd\x3d\xd6\xa6\x8b\x81\xdb\xb7\x6f\x53\x52\x7c\x8f\xed\x1b\xc6\xa7\xe7\x86\xfb\x5b\x6d\x13\x1d\x58\x9b\x45\x03\xfb\xb7\x39\xb8\x75\xeb\x16\xc9\xe4\x68\xf1\x93\xd3\x40\x45\x45\x05\x76\xbb\x9d\xa2\xa2\xa2\xb4\xad\xf6\x7c\x49\x24\x12\x74\x75\x75\x71\x60\x87\x13\x71\xc1\x78\x99\x2b\x97\x17\xe2\x2c\x31\xb2\xee\xb9\xe2\x09\xe3\x37\x37\xda\x58\xb4\x50\xc3\xe3\xf1\x00\x93\xa8\x07\xac\x56\xeb\xd8\xb5\xdd\x3e\xb9\xf1\x9a\x8d\xce\xce\x4e\x6a\x1e\x31\xb0\x61\xcd\xc4\x02\x1f\xaf\x11\xf9\xe5\xeb\xcc\x2f\x4a\x10\xe0\x60\x93\x8b\xc3\xa7\x3d\x58\xad\xd6\xb2\x39\x1d\x42\xb1\x58\x8c\x3b\x77\xee\xf0\xf6\x2e\x17\x82\x30\xf1\x5f\x0d\xfe\x50\x92\xe6\x4f\x7c\x7c\x7b\x69\x30\xe3\x73\xd6\xae\x2c\xe2\x99\x65\x22\x6e\xb7\x7b\x97\x60\x32\x99\x7a\x80\x44\xc6\xde\x33\x88\xd7\xeb\xa5\xaa\xd2\xc8\xb3\xf5\x85\x19\xfb\x5c\xfb\x73\x84\xdf\xfe\x88\x72\xe1\xc7\xcc\x06\x00\xb6\xae\xb7\x32\x3c\x3c\xdc\x68\x3a\x76\xec\x58\x8f\x24\x49\x8d\xc0\x3e\x45\x51\x9e\x90\x65\x79\xf5\x0c\xeb\x1e\x43\x96\x65\xd0\x20\x95\x7a\x30\x59\x1f\x66\xfd\xf3\xc5\xf4\xf5\x27\x78\x7a\x59\xf6\xf3\xb8\xd4\xe8\x34\x57\xd3\x1e\xd3\xd0\xd0\xd0\x04\x5c\x98\x19\xb9\x99\xd9\xfc\x82\x95\x17\xd7\x5a\x31\x8b\xf9\xfd\x1c\x73\xd7\x97\xe0\xcc\xf9\x30\x81\x70\xf2\xb4\x2e\xdb\x2a\x17\x2f\x0f\x71\xf1\xf2\xb8\xec\x72\x2a\x84\x81\x73\xb1\x58\xec\xe8\x3f\x8a\x11\x01\x0b\xdf\xaf\x5a\x9d\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82"),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2022, 2, 2, 18, 17, 28, 461043783, time.UTC),
			uncompressedSize: 1288,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x8c\x54\x41\xaf\xdb\x36\x0c\xbe\xe7\x57\xb0\xbe\xe4\x05\x88\xa5\xe6\xbd\x0e\x1d\x12\x3b\x45\xb1\x16\xbb\x6c\x68\x81\x6d\x87\x61\xd8\x81\x91\x68\x5b\xae\x2c\x79\x12\x1d\x27\x5b\xf7\xdf\x07\xdb\xc9\x5e\x8c\x97\x01\xbb\x44\x14\xf9\xf1\xe3\x47\x32\x56\xf6\xea\xc3\xa7\xef\x7e\xfe\xf5\xf3\x47\xa8\xb8\xb1\xfb\x45\x36\x1d\x00\x59\x45\xa8\x07\x03\x20\x6b\x88\x11\x54\x85\x21\x12\xe7\x49\xc7\x45\xfa\x6d\x72\x1b\x72\xd8\x50\x9e\x68\x8a\x2a\x98\x96\x8d\x77\x09\x28\xef\x98\x1c\xe7\xc9\x67\xe4\x0a\x7c\x01\x1f\x4f\xc6\x12\x44\x0a\x47\x0a\x10\x19\xb9\x8b\xd0\x78\x67\xd8\x07\xe3\x4a\x01\xef\x03\xc1\x88\xfd\x34\xc7\x46\xd0\xbe\x77\xef\xee\xd4\x3b\x1a\xea\x5b\x1f\xf8\xa6\x58\x6f\x34\x57\xb9\xa6\xa3\x51\x94\x8e\x97\x35\x18\x67\xd8\xa0\x4d\xa3\x42\x4b\xf9\xe6\x0e\x11\x76\x5c\xf9\x70\x43\xf3\x23\x9e\xe0\x7b\xef\xfe\x34\xd5\x1d\xf4\x17\x3a\xf7\x3e\xe8\x78\x83\x6f\x3d\xad\xdb\x4b\x9f\x34\x68\x5f\xcf\xfa\x5c\x9b\x08\xad\x27\xe8\xda\xab\x35\xb4\x34\xda\xb7\x49\xd7\xf8\xcc\x37\x20\x67\x22\x2a\xe6\x36\xa5\x3f\x3a\x73\xcc\x93\x8b\x80\x94\xcf\x2d\xdd\xc8\x61\x3a\xb1\x1c\xf6\xb8\xbb\xee\x6c\xb6\x32\x36\x6c\x69\x3f\x9f\xf5\x4f\xa3\xd0\x4c\x4e\xb1\x09\x67\x8d\xfb\x02\x81\x6c\x9e\x18\x35\xac\x74\xa8\x92\x27\xa6\xc1\x92\x64\xeb\xca\x04\xaa\x40\x45\x9e\xc8\x21\x2a\x06\xc7\x8b\xbc\xc8\x67\x4b\xb1\x22\xe2\x2b\x78\x50\x1f\xb7\x52\x2a\xed\xea\x28\x94\xf5\x9d\x2e\x2c\x06\x12\xca\x37\x12\x6b\x3c\x49\x6b\x0e\x51\x1e\x3a\xdb\xa0\x7c\x2d\xde\x8a\x47\xa9\xe2\xe5\x2e\x1a\xe3\x84\x8a\xf1\xff\xd4\x19\xb3\x1a\xbc\x93\x30\xd7\x81\x05\x59\x2d\x4a\xc3\x55\x77\x10\xc6\x4b\x6a\x7c\x6d\xd2\x21\x79\xb4\xc6\xec\x17\x35\x2e\x74\xd3\xbf\x1d\x34\x15\xc3\xa6\x83\x7a\x66\xed\x22\x89\xc2\x3b\xc6\x9e\xa2\x6f\xa6\xe6\x02\x59\xc2\x48\x51\x1e\xbf\x11\x4f\x62\x23\xeb\x28\xd1\x5a\x51\xc7\x64\x9f\xc9\x89\x6a\xce\x8b\xf1\xec\xd4\x9c\xb7\xef\x7b\x51\x7a\x5f\x5a\x62\x2c\x1b\x74\x58\x52\x18\xc9\x4b\xc6\x52\xd6\xf1\x9d\xd1\xf9\x2f\xef\xd3\xcd\xd3\xe6\xcd\xe3\xdb\x37\x4f\xaf\xd3\xcd\x7f\x90\xef\x7b\xe3\xb4\xef\x85\x46\xc6\x1f\xf0\x4c\x01\x72\x78\xe1\xfa\xfa\x15\x7e\xfb\x7d\x07\x45\xe7\xd4\xf0\x4d\xc3\x50\xe4\x61\xf5\xd7\xbf\x00\xd1\x76\xb1\x7a\xc0\x50\x76\x0d\x39\x8e\xab\xdd\xdf\x13\x64\x59\xc7\xe5\x1a\x1c\xf5\xf0\x01\x99\x1e\x56\xab\xdd\xc5\xaf\xbc\x2b\x4c\xb9\x5c\xc3\x72\x2e\x72\xb9\xda\xdd\xaa\xcc\xe4\xf5\xe9\xc9\x0e\x5e\x9f\xf7\x99\x1c\x8f\xc5\xf3\x68\xc6\xa1\x48\x65\xeb\x28\x35\x1d\xd3\x71\xcf\xf3\x41\x66\x72\x7a\xc7\x16\xd9\xab\x34\x85\xa3\x69\xb6\xc0\x31\x7f\xdc\xc6\xe9\xb7\xcf\x1f\xb7\x74\x6a\xd1\x69\xc6\xc3\x22\x4d\xf7\x8b\x7f\x02\x00\x00\xff\xff\x1b\x48\xa5\x55\x08\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/css"].(os.FileInfo),
		fs["/icon.png"].(os.FileInfo),
		fs["/index.html"].(os.FileInfo),
	}
	fs["/css"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/css/main.css"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
