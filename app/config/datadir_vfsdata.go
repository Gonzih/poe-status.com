// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// DataDir statically implements the virtual filesystem provided to vfsgen.
var DataDir = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2022, 2, 2, 18, 17, 28, 404050341, time.UTC),
		},
		"/config.yaml": &vfsgen۰CompressedFileInfo{
			name:             "config.yaml",
			modTime:          time.Date(2022, 2, 2, 18, 17, 28, 404050341, time.UTC),
			uncompressedSize: 7904,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x84\x99\x41\x8f\x5d\x45\xce\x86\xf7\xfd\x2b\x5a\xec\x13\x1d\xbb\xca\x2e\x9b\x1d\x1f\xf0\x2d\x66\x26\x30\x02\xa4\x59\x5f\x42\x12\x1a\x3a\x7d\xa3\xee\x8e\x88\xe6\xd7\x8f\xca\x8f\x2f\x42\x88\x3b\xb3\x39\xee\x7b\x8e\xeb\xad\x2a\xdb\xf5\x96\xed\x7e\x3e\xff\xfa\xe6\xe1\xe9\xf3\x9b\xdb\xdb\xf7\xa7\xbb\x87\xcf\x6f\xbf\xff\xf6\xd5\xd7\xdf\x7d\xf1\xcd\x57\xdf\xbe\xfa\xe1\xdb\xbf\x7f\xfd\xcd\x9f\x7e\x8a\xde\xdc\x7c\x78\xbd\xb5\xbf\xf8\xf8\xf4\xfc\x78\xba\xbf\x3b\xed\x1f\xb7\xb7\xa7\x8f\x2f\xef\xcf\xef\xee\x1e\x5e\x7e\x38\x3d\xff\x7c\x7e\xfb\xe6\xd3\xdd\xfd\x9b\x97\xaf\xcf\xef\x6f\x6e\x6f\x7f\x78\xf3\xe9\xf4\x84\xd6\xc7\xa7\xab\x5a\x9f\xfd\xeb\xf4\xf4\xf3\xdd\xc3\xbb\xe7\xf3\xc3\xed\x57\x2f\xbf\x7c\xf9\x19\x23\x7e\xfb\xe9\xf5\xd5\x21\x5f\x9e\xee\xef\xde\x9e\x1f\x1f\x2e\x6b\x78\xfa\xe5\xba\xee\x17\xef\x9f\x9e\xdf\x3c\xfe\x74\x7a\x8f\xea\x9b\xeb\xcb\xfd\xff\xc7\xd3\xc3\xaf\x6f\x3f\x3e\x3e\xa3\xf9\xf6\xf1\x74\x55\xf5\x1f\xe7\x87\x9f\xce\x0f\xe8\xdd\x9f\x1f\xae\xea\xbd\xba\xbb\x3f\xb5\xda\xfb\xbb\xfb\xab\x6a\xff\xf7\x78\xfa\xf7\xdd\x3d\x7a\x3f\x3e\x5e\x55\xfb\xe7\xe9\xf1\xae\xed\xf9\xe1\x74\x5d\xed\xd5\xf9\xe9\xf5\xf9\xb7\x9e\xf5\x7c\x55\xed\xfb\xbb\x87\x77\xa7\x0f\xe7\xc7\x37\x6d\xc3\x77\x57\x35\xff\x76\xfa\x70\xd9\xc5\x2f\x1f\xae\x68\xdd\x7c\xfa\xf1\xfc\xe9\xaf\xc3\x63\x7f\xf9\x9f\xd1\x71\x45\xe9\xbf\x04\xc7\x95\x11\x7f\x15\x1b\x57\x54\xff\xc2\xe1\x57\x34\xff\xec\xef\x2b\x6a\x7f\xf2\xe3\x15\xad\xef\x3e\x3e\x3d\x5d\x56\xf7\x78\xc5\x3c\x37\x1f\xce\x8f\xcf\x4f\x9f\xdf\xbc\xb8\x95\x9b\x17\xb7\xe3\xe6\xc5\xed\xbc\x79\x71\xeb\x37\x2f\x6e\xd7\xcd\x8b\xdb\xdc\xef\xf7\x4b\xd9\xbf\x64\xff\xd4\x63\x3f\xb6\xb2\xea\x7e\xec\xaf\xba\xc7\xe8\x1e\x34\xf6\xd7\xb1\x3f\x8c\xfd\x61\xec\x61\x73\xff\x9c\x05\xbd\x01\x6c\xff\xb5\xb6\xde\xda\x3f\x63\xff\x15\x1b\x2f\xb6\x5e\xec\xaf\xb1\xf1\xc2\xf6\x23\xf6\x63\xeb\xe5\xd6\xcb\x5a\xd0\x71\xd4\xd3\xeb\x59\x6f\xa4\xde\x88\xd4\xb3\xd6\x5b\x6b\x15\xdd\x18\x52\x73\xcb\x9c\xf5\xac\x51\x5e\x9a\xce\xce\x4a\xb3\x90\xb5\x10\x54\x6a\x63\x6c\xcf\x6a\x6b\x66\xf5\xf4\x7a\x96\xa6\xd7\xfb\x5a\xfc\x38\xca\x74\xb5\x9e\x51\x08\x63\xd6\x7b\xaf\x37\xb5\xfa\x59\x5f\xe7\x51\xf6\x90\xfa\x5b\xb0\x8d\xd5\xb3\xfe\xc6\x46\xb5\xce\x69\x7b\xe3\xb3\x66\x99\x5e\x3a\x65\xa3\x99\x5b\xd3\xca\x02\x56\xeb\xb4\xda\xaf\xc9\xac\xe7\xd6\xb4\x72\x87\x4d\xa9\x67\x7d\x9d\xbc\xa9\xaf\x73\x23\x5b\xed\xcb\x6a\x5f\x56\x76\xb0\x28\xe4\xdc\x7f\x7b\xad\xd0\x6b\x85\x5e\x2b\xf4\x21\xf5\xac\xf7\x93\xe7\xc6\xf1\xda\xa3\x7b\x69\x7a\xbd\x29\x0f\x7a\xa1\x79\x4a\xf9\xba\x9c\x7d\x6c\x9c\x55\xf6\x59\xb5\xda\x55\xa1\xb4\xca\xce\xab\xa2\x67\x55\x80\xac\xda\xef\x5a\x1b\x61\x15\xda\x2a\xb4\x28\x9c\x28\x6b\xc7\x51\x81\x51\xbb\x8b\x55\x4f\x02\xa9\x03\x26\x2a\x62\x2a\x64\x4a\x3f\x0f\xad\xe7\xd6\xcc\x5a\x43\x96\xf5\xb2\xac\x9a\x85\x9f\x1d\x62\xf5\xbe\xec\x90\x69\xf5\xec\xa8\x23\xec\x0a\x4f\x8e\x02\x94\xa3\x3c\x2a\x07\x61\x78\x10\x87\x07\x81\x78\x68\x0b\x34\xeb\xa4\xc8\x51\xce\x91\x83\xc8\x3c\x94\x20\x56\x50\x34\x10\x80\x0d\xc0\x06\x28\x03\x94\x01\xca\x00\x65\x80\x32\x40\x19\xa0\x0c\x50\x06\x28\x13\x94\x09\xca\x04\x85\x13\x71\x70\x24\x8e\x09\x0a\x47\xe3\x98\xa0\x4c\x50\x26\x28\x06\x8a\x81\x62\xa0\x18\x28\x06\x8a\x81\x62\xa0\x18\x28\x06\x8a\x81\xe2\x7d\x70\x41\x71\x50\x38\x85\x87\x83\xe2\xa0\x38\x28\x0e\x8a\x83\xe2\xa0\x2c\x50\x16\x28\x0b\x94\x05\xca\x02\x65\x81\xb2\x40\x59\xa0\x2c\x50\x38\xef\x47\x80\x12\xa0\x04\x28\x01\x4a\x80\x12\xa0\x04\x28\x01\x4a\x80\x12\xa0\x24\x28\x09\x4a\x82\x92\xa0\x24\x28\x09\x4a\x36\x5d\x81\x92\xa0\x64\xb3\x17\xf4\x45\x48\xc9\x31\x11\x86\x70\xc4\x42\x04\x44\xd7\x7c\x07\xe1\x09\xe3\x9a\xf8\x84\xe1\x30\x76\xf3\xa0\x10\x8a\x42\x28\x0a\xa1\x28\x84\xa2\x10\x83\x42\xb8\xc9\x68\x12\x45\x93\x90\x12\x42\x4a\x08\x22\x21\x5e\x84\x40\x91\xd9\xdf\x98\x88\x08\x11\x22\x44\x08\x8d\x26\x5a\xf1\xfe\xc5\x70\x5c\x2c\x38\x55\x70\x9c\xe0\x38\xc1\x0f\x12\xfd\x0b\x4d\x1c\x20\x18\x59\xb0\x20\xbc\x2d\xca\xa1\x54\x4c\xa0\x45\x5f\xa2\x98\x40\xa5\x34\x95\x93\xa3\x9c\x1c\xe5\xc8\x28\x27\x40\xd9\x8a\xb2\x15\x18\x5e\x94\x00\x53\x02\x4c\x09\x22\x65\x11\x8a\x37\x07\x8e\xe3\x02\x90\x01\x09\x0c\x9c\xc3\x4d\x20\x03\x93\x0f\x8e\xf6\x60\xf6\x81\x79\xb8\x02\x64\xb2\xb2\xc9\xb7\xd9\xb7\x15\xc7\x69\x72\x56\x26\xb1\x04\xef\x8b\x31\x9f\x15\x9b\x89\xe1\x5b\x58\x5f\x0c\x30\xe3\x18\x1a\x51\x6e\xd8\xd3\x40\x71\x50\x1c\x6f\x3a\x47\x14\x22\x17\x78\x5b\x9c\x28\x87\xb9\x65\xb1\xce\x85\x21\x17\x21\x05\x7b\xcb\x62\xf6\x45\x48\x2d\x56\xbd\x58\xf5\xe2\x54\xc1\xe1\x02\x71\x4b\x10\xd7\x41\xd0\x06\x2c\x15\xb0\x54\x40\x09\x41\xbc\x04\xf1\x12\xc4\x04\x6c\x2e\x49\x78\x27\xcc\x97\x38\x2e\x71\x55\xe2\xaa\x24\x96\x92\x53\x9c\x04\x0a\x24\xae\x90\xb8\x42\xe2\x0a\x89\xeb\x51\x86\xd4\xa3\x0e\x9e\x1e\xb5\x40\x3d\xea\xe0\x29\x04\xaf\x47\x1d\x3c\x85\xe7\x15\x9e\xd7\x43\x18\x47\x4a\x04\xdd\x2b\x74\xaf\xb0\xb7\xc2\xd7\x0a\x5f\x2b\x7c\xad\x30\xb4\x42\xcd\x0a\x35\x2b\xd4\xac\x50\xb3\xc2\xc9\x0a\x27\x2b\x9c\xac\x70\xb2\xc2\xc9\x0a\x55\x2a\xe4\xa8\x47\x27\x30\xec\x4f\xd8\x11\x1c\xa2\x70\x88\xc2\x21\x2a\x9d\xe4\x90\xcd\xc1\x0c\x0a\x09\xa8\xb0\x40\x72\x25\x15\x07\xcc\x51\x59\xfc\x5a\x8c\x4b\x7e\x25\xdf\xea\x3c\xa8\x32\x7b\xa7\x4e\x6a\x64\x89\xa0\x68\x85\x94\x72\x56\x74\x90\x37\x92\x22\xe9\x08\x5e\x06\x19\x65\xf0\x2d\x5b\x4c\x44\x4d\x3b\x19\x3e\x93\xe4\x8c\xf9\xac\x53\x35\x25\x4b\xab\xab\x47\x1d\x4d\xc7\xc5\x8e\x6f\x1d\x83\xf8\xd1\x2a\xb5\x24\xc7\x1d\x8b\x01\x8b\x01\x0b\x17\x13\xfa\x4a\xe8\xeb\x62\x06\x12\x11\x0d\x82\x21\xb0\x67\x38\xbf\x2a\x5a\x35\xf9\x96\xa0\x24\x11\x92\x75\x9d\x69\xe2\x31\x02\x73\x10\x91\xe3\xe8\x24\xb2\x1c\x37\x88\xc1\x41\x0c\x0e\x62\x70\x90\x56\x0c\xa2\x6e\x1c\xc2\x4b\x32\x6e\xb2\x84\xc1\xcd\x3c\xb8\x1b\x07\x17\xdf\x90\xe2\x9e\x21\x35\xed\x20\xc7\x1d\xaa\x08\x27\x61\xf7\xfe\x85\x4a\x6d\x65\x68\xf9\x61\x40\x72\xa3\xb3\xdc\x4e\x73\xa1\xb5\x81\x1b\xc7\x28\xee\x19\xa3\xcc\x33\x06\xa9\xff\x30\x06\xd4\xa6\xc7\x00\x73\x2c\xc0\x58\xe0\x58\xa0\x04\xdf\x2a\xa4\xc6\x2c\x57\x8d\x59\x97\xf7\x98\x15\x05\xc3\xd8\xad\x29\xa2\x8e\xc5\x30\x66\x80\xe4\x86\x17\x6d\x0f\x07\xcc\x01\x5b\xd8\x73\xd5\x3d\x36\x16\x19\xf9\x2a\x66\x18\xb8\x71\xc0\x4b\x03\x6f\x8e\x10\xbe\x51\xcd\x04\xf3\x05\x16\x0c\xe6\xc3\xd3\x23\xd8\x43\x2c\xbe\xb1\x88\x60\xf6\xc4\x7f\x90\xd5\xc8\x8a\x9e\x41\x14\x8c\x9c\x7c\x63\x78\xd6\xe5\x36\xc8\x34\x07\x31\x31\x89\x89\x49\x4c\x4c\x58\x6a\x12\x1a\x13\x96\x9a\x44\xc8\x3c\xba\xae\x28\xcc\xc9\xd1\x9e\x94\x3d\x93\x33\x3d\xa5\xd2\xc9\xa9\xe5\xa3\xa9\x54\x63\x5a\xa7\x78\x8e\x8a\x82\x39\x2e\x95\x47\x8b\x89\x30\x84\x23\x6a\x80\x55\x22\x38\xad\x9c\x3a\xbd\xf8\x7a\x46\xf1\xd2\x8c\x3a\xa2\x13\xa2\x9e\x6c\xc5\xd8\x8a\xb1\x15\x63\x2b\xc6\x56\x8c\xad\x18\xa4\x6a\x44\xb2\xc1\x98\x46\xc6\x69\x64\x9c\x46\x8e\x69\x24\x90\x46\x02\x69\xa4\x70\x46\x62\x66\xd2\x35\x11\x13\x91\x4b\x99\x28\x2f\x2b\x18\x0c\x7a\x32\xa5\x56\xe2\x04\x18\x64\x65\xaa\x94\x4e\x65\x33\xe3\x04\x18\xf5\x9d\x29\x5b\x19\x45\x2c\x36\x0f\xca\x28\x50\xe6\xe8\x32\x4b\xa9\xb3\x6a\x40\xd7\x67\x26\x88\xd9\xb5\x16\xbf\xa8\xb9\x8c\xad\x58\x45\xa4\x51\x5e\x99\xb3\x77\xef\x97\x15\x59\xe6\xe5\x2a\x83\x82\x6c\x61\x25\x62\xd7\x88\x5d\x0b\x76\x1b\xcc\x07\x21\x59\x50\x0c\x06\xfb\x0b\xf6\x17\x2c\x22\xea\xac\x18\xf7\xad\xc5\xa2\xf4\x03\x93\x82\xc9\xa8\x98\x8c\x92\xc9\x12\x57\x65\x85\x9b\xe5\xc1\x00\xe6\xa3\x9e\xb2\x64\xbe\x64\xbe\x64\xbe\x64\xbe\x34\x5e\x32\x6d\xb2\xf7\xc4\x8d\xc9\x22\x92\x2a\x34\xbb\x0c\xad\xdb\xc2\x32\x18\x80\x03\xb8\xc3\x9d\x90\x72\x42\xca\x09\x29\x27\xa4\x9c\x90\x72\x4e\x87\x73\x3a\x1c\xfe\x74\xe2\xcc\x29\xbd\x9c\x9a\xc4\x09\x1b\x27\x6c\x9c\x9b\xd2\xc9\xa8\x9d\x3c\xd9\x39\x40\x2e\x95\x52\xf9\xa0\xfa\x85\xb3\xdc\x98\x1d\x4f\x3b\xd5\xb6\x5b\x5d\xd7\x6e\x75\x41\x3b\x2e\x76\x8e\x8c\x43\x56\xde\x35\xf4\xa5\x7c\xee\xfa\xd9\xbb\xa4\x4e\xaa\x69\x44\x5d\x75\xee\xec\x7d\x2d\x44\x99\xc7\x17\x2a\x0b\x15\x72\x29\x8f\xba\x4c\x1d\x37\x7a\x16\xd8\x3a\xba\x06\x3f\xba\x20\x57\xc4\x44\x54\xa5\x7d\x08\x9a\x65\x9e\x45\x95\xb5\x30\xcf\x22\x9f\x58\x98\x67\x71\x8e\x16\x49\xf7\x9a\x80\xcd\x4a\x1d\x16\x1c\xb2\x66\x25\x04\x8b\x16\xc5\xa2\x87\xb0\xbc\xd8\x74\x79\x31\xfb\x5a\x95\xf7\xac\xae\xf3\x57\x05\xfb\x22\xae\x17\x21\xb5\x60\xcc\x95\xca\xaf\x22\xf1\x95\x75\x5d\x2f\x82\x21\x8e\x6e\x0a\x74\x57\xa0\xd6\x12\xec\x28\x48\xda\x02\xbf\x07\x49\x5b\x70\x8b\x06\xd9\x5a\x90\xad\x05\xd7\x67\x90\x83\x05\x6c\x1a\xf0\x4b\x50\x22\x06\x25\x62\x50\x22\x06\x25\x62\x50\x22\x06\x25\x62\x1c\xdd\xa6\xa0\x07\x41\x89\x18\x94\x88\x41\x51\x18\xa4\x69\x81\x59\x43\xba\xf9\xc5\x0c\x54\x36\x21\x68\x4a\xe5\x3d\x81\xad\x03\x96\x0a\xda\x51\xa1\x60\x6a\xd2\x36\x63\x1c\xf7\x74\x70\xfb\xc6\xe8\x46\x1a\x2f\xf1\x51\xe0\x9c\x80\x9e\xc2\x5b\x14\xb3\x87\x17\xd3\x86\xd7\x49\x0d\x67\x22\x72\xa2\xe8\xce\xcb\xa5\xd1\xc2\xfe\xa0\xfb\xc8\x5a\x67\x1e\xdd\x6c\xe9\x6e\x4b\xb7\x5b\xe8\xb7\xe0\x80\xc4\x01\x89\x03\x92\xec\x37\xe1\xf9\x24\x63\x49\x4c\x9e\x98\x3c\x31\x5d\x52\x5d\x27\xa6\x4b\x4c\x97\x1c\xd8\x84\xe7\x53\x2e\x8d\x1d\xbe\x31\x03\xa6\x4b\xad\x60\x48\x55\x7e\x81\x39\x8b\xac\x72\x16\xa9\xe6\x2c\x37\x26\x76\x49\xce\x74\x52\x5e\xa5\x0d\xbe\x2d\x04\x7d\x21\x2a\xa9\x34\xfa\x43\x0e\x0a\x87\x39\x63\xb5\x58\x88\xfa\xd6\x1d\xa9\x6e\x49\xa5\xd0\x6f\x2a\x62\xc9\x9c\xf4\x9a\xea\x9a\x48\xb2\xc3\xcc\x1e\xf0\x7b\xef\xa9\x9b\x4f\x97\xee\xd3\xa5\xfd\x44\x0d\x78\x70\x94\xb7\x6c\x7d\xb9\x34\xab\x5a\xaf\xdb\x4e\x97\xbe\xd3\xa5\xe1\x21\xdd\x06\x51\xe9\x7e\x54\x77\x86\xec\xd2\x80\x91\x8b\xec\x4e\x8c\x5e\x7a\x37\xfd\xbe\x5b\x56\xde\x3d\x2b\x8e\xb1\xfc\xa1\x43\x41\x3f\x80\xd4\x57\xba\xfe\xda\xa5\x39\x85\xb7\xd2\x0c\xd0\x41\x4f\x61\x4c\xea\xd6\xb1\xba\x6c\xee\x12\x72\x74\x0d\xd9\x99\x91\x4c\xa5\x23\x31\x27\x45\xec\x9c\x34\xb6\x3a\xdd\x90\x4e\x34\xa4\x33\x0d\xe9\x54\x43\xcc\x69\x41\xd9\x42\xbf\xef\x12\xe9\xcb\x44\xbc\xed\xe5\x07\xfb\xf6\x83\x9a\xd7\xbb\x5d\xe4\xdd\x64\x71\xba\x84\x5b\x52\xf7\xe2\x6d\x59\xdc\x5b\x12\xdd\x76\x0b\xe9\xa2\xb7\xdf\x77\xd8\x4a\x92\x5b\x4b\x0e\xec\x9e\x83\x06\x5b\x2e\xe6\xc9\x2e\x96\x33\xba\x2a\xfc\xbd\x6e\xbd\x14\xa7\xe3\x52\x6c\x5e\x24\x7a\x64\xaa\x2a\xb6\xa8\xbd\xb2\xee\x04\x1d\xc4\xb4\x76\x6e\xa7\xb3\x4b\x18\x5b\x14\xa6\xb6\x28\xfc\x9c\xdc\x48\xfb\xbe\xd0\x45\xa7\x62\xcb\xd1\xd2\x5a\x56\xe1\xb6\x96\x50\x11\xe9\xa5\x7c\xe9\x6a\x86\x6c\x65\x1c\x49\xca\xdc\x4d\xc9\x21\x83\x44\x5c\x57\x57\x1a\xab\x4b\x8d\x45\x5d\xb0\x01\x5b\x6a\xcb\xd1\x72\xb6\xb4\x96\xde\xb2\xf1\x56\xe3\xad\xc6\x8b\xc6\x8b\xc6\x8b\xc6\x8b\xc6\x8b\xc6\x8b\x2e\x59\x6c\x76\x25\x52\xe3\x27\xf6\xdb\x52\x5b\x52\x86\x58\xd7\x0c\x70\xee\x3c\x20\xeb\x79\x64\x67\xde\x86\x54\x12\x82\x39\x65\x75\xf6\x4c\xda\xfd\x7b\x8a\x4d\x0b\x67\x76\xd6\x3a\xfb\xae\x99\x49\xe3\x6c\xcb\xd1\x72\xb6\xb4\x96\xde\x72\xb5\x8c\x96\xe4\xde\x94\xec\x5b\x4a\xcb\xc6\xf1\x1e\xef\x3d\x6e\xf5\x6f\xd6\x97\xf3\x92\xb4\x67\x76\xd6\xde\x69\xfb\x25\x6f\xbf\x24\xee\x97\xcc\x9d\x44\xf0\x18\xad\x47\x3a\xb4\xb3\xf6\xce\xd0\x87\x77\x8a\x4e\x02\x0e\x41\x9b\x50\xce\x99\xfa\x42\x76\x76\xaa\x94\x10\xd6\x55\xb4\x75\x41\xb3\xd3\x6a\xfe\x5b\x71\x74\xd6\x4c\x7b\xd9\xfe\x90\x45\x1f\xe4\xc8\x15\x57\x5b\x92\x25\x6b\x11\xb4\xad\xc5\xff\x4b\xda\xbe\x3b\x59\x44\xe2\x07\x17\x1b\x64\x7a\x10\xb3\x2b\x4d\x62\x1f\x83\xff\x77\x4c\x27\x05\x9c\xce\xf8\xe6\x17\xb7\xce\x09\x6d\xef\xfb\x3f\x01\x00\x00\xff\xff\x3f\xcd\x4c\xf5\xe0\x1e\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/config.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
