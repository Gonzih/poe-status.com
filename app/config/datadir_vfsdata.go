// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// DataDir statically implements the virtual filesystem provided to vfsgen.
var DataDir = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2022, 2, 3, 0, 12, 45, 166160595, time.UTC),
		},
		"/config.yaml": &vfsgen۰CompressedFileInfo{
			name:             "config.yaml",
			modTime:          time.Date(2022, 2, 3, 0, 12, 45, 156160595, time.UTC),
			uncompressedSize: 7854,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x84\x99\x41\x6f\x5d\xc7\xcd\x86\xf7\xfa\x15\x17\xd9\xdb\x38\xe4\x0c\x39\x64\x76\xf9\xf2\xa1\x8b\xa2\x01\x8a\xb6\x40\xd7\x37\x8e\xed\x28\x95\x75\x05\x49\x46\x8c\xfe\xfa\x62\xf8\xf0\x06\x41\xe0\xdb\x6e\x0e\x75\xcf\xe1\xbc\x33\x43\x72\xde\x21\xa9\xa7\x77\xdf\xde\x9d\x4e\xdf\x7d\x7e\x79\x7d\x3e\x3f\xdc\x9f\xf7\x8f\xd3\xe9\xfc\xf9\xed\xc3\xe5\xe3\xfd\xe3\xdb\xa7\xf3\xeb\xcf\x97\x0f\xef\xbf\xdc\x3f\xbc\x7f\xfb\xee\xf2\xe9\xee\x74\xfa\xc7\xfb\x2f\xe7\x17\xb4\x3e\xbf\xdc\xd4\xfa\xe6\x9f\xe7\x97\x9f\xef\x1f\x3f\xbe\x5e\x1e\x4f\xff\xff\xf6\xfb\xb7\xdf\x30\xe2\xd7\x9f\xde\xdd\x1c\xf2\xfd\xf9\xe1\xfe\xc3\xe5\xf9\xf1\xba\x86\x97\x5f\x6e\xeb\x7e\xf7\xe9\xe5\xf5\xfd\xf3\x4f\xe7\x4f\xa8\xbe\xbf\xbd\xdc\x3f\x3d\x9f\x1f\xff\xf5\xe1\xf3\xf3\x2b\x9a\x1f\x9e\xcf\x37\x55\xff\x72\x79\xfc\xe9\xf2\x88\xde\xc3\xe5\xf1\xa6\xde\x0f\xf7\x0f\xe7\x56\xfb\x74\xff\x70\x53\xed\xff\x9e\xcf\xff\xbe\x7f\x40\xef\xc7\xe7\x9b\x6a\x7f\x3d\x3f\xdf\xb7\x3d\x9f\xce\xb7\xd5\x7e\xb8\xbc\xbc\xbb\xfc\xda\xb3\x5e\x6e\xaa\xfd\xfd\xfe\xf1\xe3\xf9\xe9\xf2\xfc\xbe\x6d\xf8\xf1\xa6\xe6\x9f\xcf\x4f\xd7\x5d\xfc\xf2\x74\x43\xeb\xee\xcb\x8f\x97\x2f\x5f\x0f\x8f\xfd\xe5\x7f\x46\xc7\x0d\xa5\xff\x12\x1c\x37\x46\x7c\x2d\x36\x6e\xa8\x7e\xc5\xe1\x37\x34\xff\xe8\xef\x1b\x6a\x7f\xf0\xe3\x0d\xad\xbf\x7d\x7e\x79\xb9\xae\xee\xf9\x86\x79\xee\x9e\x2e\xcf\xaf\x2f\xdf\xde\xbd\x39\xc9\xdd\x9b\xd3\xb8\x7b\x73\x9a\x77\x6f\x4e\x7e\xf7\xe6\xb4\xee\xde\x9c\x72\xbf\xdf\x2f\x65\xff\x92\xfd\x53\x8f\xfd\xd8\xca\xaa\xfb\xb1\xbf\xea\x1e\xa3\x7b\xd0\xd8\x5f\xc7\xfe\x30\xf6\x87\xb1\x87\xcd\xfd\x73\x16\xf4\x06\xb0\xfd\xd7\xda\x7a\x6b\xff\x8c\xfd\x57\x6c\xbc\xd8\x7a\xb1\xbf\xc6\xc6\x0b\xdb\x8f\xd8\x8f\xad\x97\x5b\x2f\x6b\x41\xc7\x51\x4f\xaf\x67\xbd\x91\x7a\x23\x52\xcf\x5a\x6f\xad\x55\x74\x63\x48\xcd\x2d\x73\xd6\xb3\x46\x79\x69\x3a\x3b\x2b\xcd\x42\xd6\x42\x50\xa9\x8d\xb1\x3d\xab\xad\x99\xd5\xd3\xeb\x59\x9a\x5e\xef\x6b\xf1\xe3\x28\xd3\xd5\x7a\x46\x21\x8c\x59\xef\xbd\xde\xd4\xea\x67\x7d\x9d\x47\xd9\x43\xea\x6f\xc1\x36\x56\xcf\xfa\x1b\x1b\xd5\x3a\xa7\xed\x8d\xcf\x9a\x65\x7a\xe9\x94\x8d\x66\x6e\x4d\x2b\x0b\x58\xad\xd3\x6a\xbf\x26\xb3\x9e\x5b\xd3\xca\x1d\x36\xa5\x9e\xf5\x75\xf2\xa6\xbe\xce\x8d\x6c\xb5\x2f\xab\x7d\x59\xd9\xc1\xa2\x90\x73\xff\xed\xb5\x42\xaf\x15\x7a\xad\xd0\x87\xd4\xb3\xde\x4f\x9e\x1b\xc7\x6b\x8f\xee\xa5\xe9\xf5\xa6\x3c\xe8\x85\xe6\x29\xe5\xeb\x72\xf6\xb1\x71\x56\xd9\x67\xd5\x6a\x57\x85\xd2\x2a\x3b\xaf\x8a\x9e\x55\x01\xb2\x6a\xbf\x6b\x6d\x84\x55\x68\xab\xd0\xa2\x70\xa2\xac\x1d\x47\x05\x46\xed\x2e\x56\x3d\x09\xa4\x0e\x98\xa8\x88\xa9\x90\x29\xfd\x3c\xb4\x9e\x5b\x33\x6b\x0d\x59\xd6\xcb\xb2\x6a\x16\x7e\x76\x88\xd5\xfb\xb2\x43\xa6\xd5\xb3\xa3\x8e\xb0\x2b\x3c\x39\x0a\x50\x8e\xf2\xa8\x1c\x84\xe1\x41\x1c\x1e\x04\xe2\xa1\x2d\xd0\xac\x93\x22\x47\x39\x47\x0e\x22\xf3\x50\x82\x58\x41\xd1\x40\x00\x36\x00\x1b\xa0\x0c\x50\x06\x28\x03\x94\x01\xca\x00\x65\x80\x32\x40\x19\xa0\x4c\x50\x26\x28\x13\x14\x4e\xc4\xc1\x91\x38\x26\x28\x1c\x8d\x63\x82\x32\x41\x99\xa0\x18\x28\x06\x8a\x81\x62\xa0\x18\x28\x06\x8a\x81\x62\xa0\x18\x28\x06\x8a\xf7\xc1\x05\xc5\x41\xe1\x14\x1e\x0e\x8a\x83\xe2\xa0\x38\x28\x0e\x8a\x83\xb2\x40\x59\xa0\x2c\x50\x16\x28\x0b\x94\x05\xca\x02\x65\x81\xb2\x40\xe1\xbc\x1f\x01\x4a\x80\x12\xa0\x04\x28\x01\x4a\x80\x12\xa0\x04\x28\x01\x4a\x80\x92\xa0\x24\x28\x09\x4a\x82\x92\xa0\x24\x28\xd9\x74\x05\x4a\x82\x92\xcd\x5e\xd0\x17\x21\x25\xc7\x44\x18\xc2\x11\x0b\x11\x10\x5d\xf3\x1d\x84\x27\x8c\x6b\xe2\x13\x86\xc3\xd8\xcd\x83\x42\x28\x0a\xa1\x28\x84\xa2\x10\x8a\x42\x0c\x0a\xe1\x26\xa3\x49\x14\x4d\x42\x4a\x08\x29\x21\x88\x84\x78\x11\x02\x45\x66\x7f\x63\x22\x22\x44\x88\x10\x21\x34\x9a\x68\xc5\xfb\x17\xc3\x71\xb1\xe0\x54\xc1\x71\x82\xe3\x04\x3f\x48\xf4\x2f\x34\x71\x80\x60\x64\xc1\x82\xf0\xb6\x28\x87\x52\x31\x81\x16\x7d\x89\x62\x02\x95\xd2\x54\x4e\x8e\x72\x72\x94\x23\xa3\x9c\x00\x65\x2b\xca\x56\x60\x78\x51\x02\x4c\x09\x30\x25\x88\x94\x45\x28\xde\x1c\x38\x8e\x0b\x40\x06\x24\x30\x70\x0e\x37\x81\x0c\x4c\x3e\x38\xda\x83\xd9\x07\xe6\xe1\x0a\x90\xc9\xca\x26\xdf\x66\xdf\x56\x1c\xa7\xc9\x59\x99\xc4\x12\xbc\x2f\xc6\x7c\x56\x6c\x26\x86\x6f\x61\x7d\x31\xc0\x8c\x63\x68\x44\xb9\x61\x4f\x03\xc5\x41\x71\xbc\xe9\x1c\x51\x88\x5c\xe0\x6d\x71\xa2\x1c\xe6\x96\xc5\x3a\x17\x86\x5c\x84\x14\xec\x2d\x8b\xd9\x17\x21\xb5\x58\xf5\x62\xd5\x8b\x53\x05\x87\x0b\xc4\x2d\x41\x5c\x07\x41\x1b\xb0\x54\xc0\x52\x01\x25\x04\xf1\x12\xc4\x4b\x10\x13\xb0\xb9\x24\xe1\x9d\x30\x5f\xe2\xb8\xc4\x55\x89\xab\x92\x58\x4a\x4e\x71\x12\x28\x90\xb8\x42\xe2\x0a\x89\x2b\x24\xae\x47\x19\x52\x8f\x3a\x78\x7a\xd4\x02\xf5\xa8\x83\xa7\x10\xbc\x1e\x75\xf0\x14\x9e\x57\x78\x5e\x0f\x61\x1c\x29\x11\x74\xaf\xd0\xbd\xc2\xde\x0a\x5f\x2b\x7c\xad\xf0\xb5\xc2\xd0\x0a\x35\x2b\xd4\xac\x50\xb3\x42\xcd\x0a\x27\x2b\x9c\xac\x70\xb2\xc2\xc9\x0a\x27\x2b\x54\xa9\x90\xa3\x1e\x9d\xc0\xb0\x3f\x61\x47\x70\x88\xc2\x21\x0a\x87\xa8\x74\x92\x43\x36\x07\x33\x28\x24\xa0\xc2\x02\xc9\x95\x54\x1c\x30\x47\x65\xf1\x6b\x31\x2e\xf9\x95\x7c\xab\xf3\xa0\xca\xec\x9d\x3a\xa9\x91\x25\x82\xa2\x15\x52\xca\x59\xd1\x41\xde\x48\x8a\xa4\x23\x78\x19\x64\x94\xc1\xb7\x6c\x31\x11\x35\xed\x64\xf8\x4c\x92\x33\xe6\xb3\x4e\xd5\x94\x2c\xad\xae\x1e\x75\x34\x1d\x17\x3b\xbe\x75\x0c\xe2\x47\xab\xd4\x92\x1c\x77\x2c\x06\x2c\x06\x2c\x5c\x4c\xe8\x2b\xa1\xaf\x8b\x19\x48\x44\x34\x08\x86\xc0\x9e\xe1\xfc\xaa\x68\xd5\xe4\x5b\x82\x92\x44\x48\xd6\x75\xa6\x89\xc7\x08\xcc\x41\x44\x8e\xa3\x93\xc8\x72\xdc\x20\x06\x07\x31\x38\x88\xc1\x41\x5a\x31\x88\xba\x71\x08\x2f\xc9\xb8\xc9\x12\x06\x37\xf3\xe0\x6e\x1c\x5c\x7c\x43\x8a\x7b\x86\xd4\xb4\x83\x1c\x77\xa8\x22\x9c\x84\xdd\xfb\x17\x2a\xb5\x95\xa1\xe5\x87\x01\xc9\x8d\xce\x72\x3b\xcd\x85\xd6\x06\x6e\x1c\xa3\xb8\x67\x8c\x32\xcf\x18\xa4\xfe\xc3\x18\x50\x9b\x1e\x03\xcc\xb1\x00\x63\x81\x63\x81\x12\x7c\xab\x90\x1a\xb3\x5c\x35\x66\x5d\xde\x63\x56\x14\x0c\x63\xb7\xa6\x88\x3a\x16\xc3\x98\x01\x92\x1b\x5e\xb4\x3d\x1c\x30\x07\x6c\x61\xcf\x55\xf7\xd8\x58\x64\xe4\xab\x98\x61\xe0\xc6\x01\x2f\x0d\xbc\x39\x42\xf8\x46\x35\x13\xcc\x17\x58\x30\x98\x0f\x4f\x8f\x60\x0f\xb1\xf8\xc6\x22\x82\xd9\x13\xff\x41\x56\x23\x2b\x7a\x06\x51\x30\x72\xf2\x8d\xe1\x59\x97\xdb\x20\xd3\x1c\xc4\xc4\x24\x26\x26\x31\x31\x61\xa9\x49\x68\x4c\x58\x6a\x12\x21\xf3\xe8\xba\xa2\x30\x27\x47\x7b\x52\xf6\x4c\xce\xf4\x94\x4a\x27\xa7\x96\x8f\xa6\x52\x8d\x69\x9d\xe2\x39\x2a\x0a\xe6\xb8\x56\x1e\x2d\x26\xc2\x10\x8e\xa8\x01\x56\x89\xe0\xb4\x72\xea\xf4\xe2\xeb\x19\xc5\x4b\x33\xea\x88\x4e\x88\x7a\xb2\x15\x63\x2b\xc6\x56\x8c\xad\x18\x5b\x31\xb6\x62\x90\xaa\x11\xc9\x06\x63\x1a\x19\xa7\x91\x71\x1a\x39\xa6\x91\x40\x1a\x09\xa4\x91\xc2\x19\x89\x99\x49\xd7\x44\x4c\x44\x2e\x65\xa2\xbc\xac\x60\x30\xe8\xc9\x94\x5a\x89\x13\x60\x90\x95\xa9\x52\x3a\x95\xcd\x8c\x13\x60\xd4\x77\xa6\x6c\x65\x14\xb1\xd8\x3c\x28\xa3\x40\x99\xa3\xcb\x2c\xa5\xce\xaa\x01\x5d\x9f\x99\x20\x66\xd7\x5a\xfc\xa2\xe6\x32\xb6\x62\x15\x91\x46\x79\x65\xce\xde\xbd\x5f\x56\x64\x99\x97\xab\x0c\x0a\xb2\x85\x95\x88\x5d\x23\x76\x2d\xd8\x6d\x30\x1f\x84\x64\x41\x31\x18\xec\x2f\xd8\x5f\xb0\x88\xa8\xb3\x62\xdc\xb7\x16\x8b\xd2\x0f\x4c\x0a\x26\xa3\x62\x32\x4a\x26\x4b\x5c\x95\x15\x6e\x96\x07\x03\x98\x8f\x7a\xca\x92\xf9\x92\xf9\x92\xf9\x92\xf9\xd2\x78\xc9\xb4\xc9\xde\x13\x37\x26\x8b\x48\xaa\xd0\xec\x32\xb4\x6e\x0b\xcb\x60\x00\x0e\xe0\x0e\x77\x42\xca\x09\x29\x27\xa4\x9c\x90\x72\x42\xca\x39\x1d\xce\xe9\x70\xf8\xd3\x89\x33\xa7\xf4\x72\x6a\x12\x27\x6c\x9c\xb0\x71\x6e\x4a\x27\xa3\x76\xf2\x64\xe7\x00\xb9\x54\x4a\xe5\x83\xea\x17\xce\x72\x63\x76\x3c\xed\x54\xdb\x6e\x75\x5d\xbb\xd5\x05\xed\xb8\xd8\x39\x32\x0e\x59\x79\xd7\xd0\xd7\xf2\xb9\xeb\x67\xef\x92\x3a\xa9\xa6\x11\x75\xd5\xb9\xb3\xf7\xb5\x10\x65\x1e\x5f\xa8\x2c\x54\xc8\xa5\x3c\xea\x32\x75\xdc\xe8\x59\x60\xeb\xe8\x1a\xfc\xe8\x82\x5c\x11\x13\x51\x95\xf6\x21\x68\x96\x79\x16\x55\xd6\xc2\x3c\x8b\x7c\x62\x61\x9e\xc5\x39\x5a\x24\xdd\x6b\x02\x36\x2b\x75\x58\x70\xc8\x9a\x95\x10\x2c\x5a\x14\x8b\x1e\xc2\xf2\x62\xd3\xe5\xc5\xec\x6b\x55\xde\xb3\xba\xce\x5f\x15\xec\x8b\xb8\x5e\x84\xd4\x82\x31\x57\x2a\xbf\x8a\xc4\x57\xd6\x75\xbd\x08\x86\x38\xba\x29\xd0\x5d\x81\x5a\x4b\xb0\xa3\x20\x69\x0b\xfc\x1e\x24\x6d\xc1\x2d\x1a\x64\x6b\x41\xb6\x16\x5c\x9f\x41\x0e\x16\xb0\x69\xc0\x2f\x41\x89\x18\x94\x88\x41\x89\x18\x94\x88\x41\x89\x18\x94\x88\x71\x74\x9b\x82\x1e\x04\x25\x62\x50\x22\x06\x45\x61\x90\xa6\x05\x66\x0d\xe9\xe6\x17\x33\x50\xd9\x84\xa0\x29\x95\xf7\x04\xb6\x0e\x58\x2a\x68\x47\x85\x82\xa9\x49\xdb\x8c\x71\xdc\xd3\xc1\xed\x1b\xa3\x1b\x69\xbc\xc4\x47\x81\x73\x02\x7a\x0a\x6f\x51\xcc\x1e\x5e\x4c\x1b\x5e\x27\x35\x9c\x89\xc8\x89\xa2\x3b\x2f\xd7\x46\x0b\xfb\x83\xee\x23\x6b\x9d\x79\x74\xb3\xa5\xbb\x2d\xdd\x6e\xa1\xdf\x82\x03\x12\x07\x24\x0e\x48\xb2\xdf\x84\xe7\x93\x8c\x25\x31\x79\x62\xf2\xc4\x74\x49\x75\x9d\x98\x2e\x31\x5d\x72\x60\x13\x9e\x4f\xb9\x36\x76\xf8\xc6\x0c\x98\x2e\xb5\x82\x21\x55\xf9\x05\xe6\x2c\xb2\xca\x59\xa4\x9a\xb3\xdc\x98\xd8\x25\x39\xd3\x49\x79\x95\x36\xf8\xb6\x10\xf4\x85\xa8\xa4\xd2\xe8\x0f\x39\x28\x1c\xe6\x8c\xd5\x62\x21\xea\x5b\x77\xa4\xba\x25\x95\x42\xbf\xa9\x88\x25\x73\xd2\x6b\xaa\x6b\x22\xc9\x0e\x33\x7b\xc0\x6f\xbd\xa7\x6e\x3e\x5d\xbb\x4f\xd7\xf6\x13\x35\xe0\xc1\x51\xde\xb2\xf5\xe5\xda\xac\x6a\xbd\x6e\x3b\x5d\xfb\x4e\xd7\x86\x87\x74\x1b\x44\xa5\xfb\x51\xdd\x19\xb2\x6b\x03\x46\xae\xb2\x3b\x31\x7a\xed\xdd\xf4\xfb\x6e\x59\x79\xf7\xac\x38\xc6\xf2\xbb\x0e\x05\xfd\x00\x52\x5f\xe9\xfa\x6b\x97\xe6\x14\xde\x4a\x33\x40\x07\x3d\x85\x31\xa9\x5b\xc7\xea\xb2\xb9\x4b\xc8\xd1\x35\x64\x67\x46\x32\x95\x8e\xc4\x9c\x14\xb1\x73\xd2\xd8\xea\x74\x43\x3a\xd1\x90\xce\x34\xa4\x53\x0d\x31\xa7\x05\x65\x0b\xfd\xbe\x4b\xa4\x2f\x13\xf1\xb6\x97\x1f\xec\xdb\x0f\x6a\x5e\xef\x76\x91\x77\x93\xc5\xe9\x12\x6e\x49\xdd\x8b\xb7\x65\x71\x6f\x49\x74\xdb\x2d\xa4\x8b\xde\x7e\xdf\x61\x2b\x49\x6e\x2d\x39\xb0\x7b\x0e\x1a\x6c\xb9\x98\x27\xbb\x58\xce\xe8\xaa\xf0\xb7\xba\xf5\x5a\x9c\x8e\x6b\xb1\x79\x95\xe8\x91\xa9\xaa\xd8\xa2\xf6\xca\xba\x13\x74\x10\xd3\xda\xb9\x9d\xce\x2e\x61\x6c\x51\x98\xda\xa2\xf0\x73\x72\x23\xed\xfb\x42\x17\x9d\x8a\x2d\x47\x4b\x6b\x59\x85\xdb\x5a\x42\x45\xa4\xd7\xf2\xa5\xab\x19\xb2\x95\x71\x24\x29\x73\x37\x25\x87\x0c\x12\x71\x5d\x5d\x69\xac\x2e\x35\x16\x75\xc1\x06\x6c\xa9\x2d\x47\xcb\xd9\xd2\x5a\x7a\xcb\xc6\x5b\x8d\xb7\x1a\x2f\x1a\x2f\x1a\x2f\x1a\x2f\x1a\x2f\x1a\x2f\xba\x64\xb1\xd9\x95\x48\x8d\x9f\xd8\x6f\x4b\x6d\x49\x19\x62\x5d\x33\xc0\xb9\xf3\x80\xac\xe7\x91\x9d\x79\x1b\x52\x49\x08\xe6\x94\xd5\xd9\x33\x69\xf7\x6f\x29\x36\x2d\x9c\xd9\x59\xeb\xec\xbb\x66\x26\x8d\xb3\x2d\x47\xcb\xd9\xd2\x5a\x7a\xcb\xd5\x32\x5a\x92\x7b\x53\xb2\x6f\x29\x2d\x1b\xc7\x7b\xbc\xf7\xb8\xd5\xbf\x59\x5f\xce\x6b\xd2\x9e\xd9\x59\x7b\xa7\xed\xd7\xbc\xfd\x9a\xb8\x5f\x33\x77\x12\xc1\x63\xb4\x1e\xe9\xd0\xce\xda\x3b\x43\x1f\xde\x29\x3a\x09\x38\x04\x6d\x42\x39\x67\xea\x0b\xd9\xd9\xa9\x52\x42\x58\x57\xd1\xd6\x05\xcd\x4e\xab\xf9\x6f\xc5\xd1\x59\x33\xed\x65\xfb\x5d\x16\x7d\x90\x23\x57\x5c\x6d\x49\x96\xac\x45\xd0\xb6\x16\xff\x2f\x69\xfb\xee\x64\x11\x89\x1f\x5c\x6c\x90\xe9\x41\xcc\xae\x34\x89\x7d\x0c\xfe\xdf\x31\x9d\x14\x70\x3a\xe3\x9b\x5f\xdc\x3a\x27\xb4\xbd\xef\xff\x04\x00\x00\xff\xff\x4f\x32\x91\xeb\xae\x1e\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/config.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
